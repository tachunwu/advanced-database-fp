// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adfp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ADFPServiceClient is the client API for ADFPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ADFPServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*Place, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
}

type aDFPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewADFPServiceClient(cc grpc.ClientConnInterface) ADFPServiceClient {
	return &aDFPServiceClient{cc}
}

func (c *aDFPServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ADFPService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aDFPServiceClient) CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, "/ADFPService/CreatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aDFPServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/ADFPService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ADFPServiceServer is the server API for ADFPService service.
// All implementations must embed UnimplementedADFPServiceServer
// for forward compatibility
type ADFPServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	CreatePlace(context.Context, *CreatePlaceRequest) (*Place, error)
	CreateComment(context.Context, *CreateCommentRequest) (*Comment, error)
	mustEmbedUnimplementedADFPServiceServer()
}

// UnimplementedADFPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedADFPServiceServer struct {
}

func (UnimplementedADFPServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedADFPServiceServer) CreatePlace(context.Context, *CreatePlaceRequest) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlace not implemented")
}
func (UnimplementedADFPServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedADFPServiceServer) mustEmbedUnimplementedADFPServiceServer() {}

// UnsafeADFPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ADFPServiceServer will
// result in compilation errors.
type UnsafeADFPServiceServer interface {
	mustEmbedUnimplementedADFPServiceServer()
}

func RegisterADFPServiceServer(s grpc.ServiceRegistrar, srv ADFPServiceServer) {
	s.RegisterService(&ADFPService_ServiceDesc, srv)
}

func _ADFPService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ADFPServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADFPService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ADFPServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ADFPService_CreatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ADFPServiceServer).CreatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADFPService/CreatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ADFPServiceServer).CreatePlace(ctx, req.(*CreatePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ADFPService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ADFPServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADFPService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ADFPServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ADFPService_ServiceDesc is the grpc.ServiceDesc for ADFPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ADFPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ADFPService",
	HandlerType: (*ADFPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ADFPService_CreateUser_Handler,
		},
		{
			MethodName: "CreatePlace",
			Handler:    _ADFPService_CreatePlace_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _ADFPService_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adfp.proto",
}
